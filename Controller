import java.awt.*;
import java.awt.event.*;

public class Controller extends WindowAdapter implements ActionListener {
    private PersonPanel view;
    private Frame mainFrame;

    public Controller(AddressBookDataModel model, PersonPanel view, FullPersistence persistence, Frame mainFrame) {
        this.model = model;
        this.view = view;
        this.persistence = persistence;
        this.mainFrame = mainFrame;
    }

    private AddressBookDataModel model;
    private FullPersistence persistence;

    @Override
    public void actionPerformed(ActionEvent e) {
        createAndShowNewPersonDialog();
    }

    @Override
    public void windowClosing(WindowEvent e) {
        try {
            persistence.storeBook(model);
            System.out.println("Adressbuch gespeichert.");
        } catch (AddressBookException abe) {
            System.out.println("Adressbuch konnte nicht gespeichert werden.");
            abe.printStackTrace();
        } finally {
            System.exit(0);
        }
    }

    private void createAndShowNewPersonDialog() {
        Dialog newPersonDialog = new Dialog(mainFrame, "Neue Person", true);
        Panel dataPanel = new Panel(new GridLayout(4, 2));
        TextField firstNameTextField = new TextField(30);
        TextField lastNameTextField = new TextField(30);
        TextField phoneTextField = new TextField(30);
        dataPanel.add(new Label("Vorname: "));
        dataPanel.add(firstNameTextField);
        dataPanel.add(new Label("Nachname: "));
        dataPanel.add(lastNameTextField);
        dataPanel.add(new Label("Telefon: "));
        dataPanel.add(phoneTextField);
        newPersonDialog.add(dataPanel, BorderLayout.CENTER);
        Button okButton = new Button("OK");
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                Person newPerson = new Person(firstNameTextField.getText(), lastNameTextField.getText(),
                        phoneTextField.getText());
                model.addPerson(newPerson);
                view.refresh();
                newPersonDialog.dispose();
            }
        });
        Panel southPanel = new Panel();
        southPanel.add(okButton);
        newPersonDialog.add(southPanel, BorderLayout.SOUTH);
        newPersonDialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                newPersonDialog.dispose();
            }
        });
        newPersonDialog.pack();
        newPersonDialog.setLocationRelativeTo(mainFrame);
        newPersonDialog.setVisible(true);
    }
}
/*
 * Der in der Methode createAndShowNewPersonDialog erzeugte und zur Anzeige
 * gebrachte Dialog kann auf zwei Weisen beendet werden, nämlich durch Schließen
 * des Fensters (dann werden die Eingaben im Dialog verworfen) oder durch
 * Anklicken des Ok-Buttons. Die Rolle der Controller, die auf diese beiden
 * Ereignisse reagieren, spielen zwei anonyme lokale Klassen, von denen eine das
 * Interface WindowListener, die andere das Interface ActionListener
 * implementiert. Der beim Ok-Button angemeldete Action- Listener liest die in
 * den drei Textfeldern des Dialogs eingegebenen Zeichenketten aus, erzeugt ein
 * entsprechendes Person-Objekt, fügt es zum Datenmodell hinzu und ruft auf dem
 * Objekt vom Typ PersonPanel die Methode refresh auf. Dann schließt er den
 * Dialog, womit das (nun aktualisierte) Hauptfenster wieder zur Bedienung
 * freigegeben wird.
